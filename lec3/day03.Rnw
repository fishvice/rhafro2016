% SLIDES - brug denne linie
\documentclass[mathserif]{beamer} % options: gray

% HANDOUTS - brug denne linie
%\documentclass[handout,mathserif]{beamer} % options: gray

\usetheme{CambridgeUS} %sidebar
\usecolortheme{dolphin}

\usepackage{graphicx}
\usepackage{amssymb,amsmath}
\usepackage[T1]{fontenc}
%\usepackage[icelandic]{babel}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage{bm}
\usepackage{tipx}
\usepackage{marvosym}
%\usepackage{subfigure}
\usepackage{pgfpages}
\usepackage{multirow}

\usepackage{tikz,makecell}
\usetikzlibrary{arrows,decorations.pathmorphing,decorations.footprints,
fadings,calc,trees,mindmap,shadows,decorations.text,patterns,positioning,shapes,matrix,fit}
\input{../lec1/graphical_settings}
\tikzset{
  invisible/.style={opacity=0},
  visible on/.style={alt={#1{}{invisible}}},
  alt/.code args={<#1>#2#3}{%
    \alt<#1>{\pgfkeysalso{#2}}{\pgfkeysalso{#3}} % \pgfkeysalso doesn't change the path
  },
}
% hvis man vil har eg. 4 slides på en side
% \pgfpagesuselayout{4 on 1}[a4paper,border shrink = 5mm, landscape]

\definecolor{lgrey}{RGB}{245,245,245}
\setbeamercolor{block body}{fg=black,bg=lgrey}


\newcommand{\bs}{\boldsymbol}
\newcommand{\bi}{\begin{itemize}\item}
\newcommand{\ei}{\end{itemize}}
\newcommand{\eq}[1]{\begin{equation} #1 \end{equation}}
\newcommand{\ea}[1]{\begin{eqnarray} #1 \end{eqnarray}}
\newcommand{\vs}{\vspace{2mm}}

\definecolor{Red}{rgb}{0.9,0,0.1}

\title[R-Hafro]{Hafro goes R}
\subtitle{Course on data wrangling using R}
\author[Bjarki\&Einar]{Bjarki Þór Elvarsson and Einar Hjörleifsson}
\date{} % beskidt .. men det virker
\institute[MRI]{Marine Research Institute}
\beamertemplatenavigationsymbolsempty % fjerner pdf-indhold, til hvis der bare skal printes slides ud
\AtBeginSection[]{
\begin{frame}<beamer>
   \frametitle{Overview}
   \tableofcontents[currentsection]
 \end{frame}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<echo=FALSE, warning=FALSE, message=FALSE>>=
library(ggplot2)
library(plyr)
library(dplyr)
@
\frame{
\titlepage
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frame{
\frametitle{Overview}
\tableofcontents
}



\section{Reading data in R}
\frame{
\frametitle{Where can we find data}
\begin{figure}
  \begin{tikzpicture}[xscale = 1,yscale = 1]
    \node (lykl)[GenericNodeStyle] at (4,2){Keyboard};
    \node (tolfr)[GenericNodeStyle] at (-4,2){Other stats software};
    \node[below of = tolfr](tolff){SPSS,Matlab,SAS};
    \node (xml)[GenericNodeStyle] at (-4,-2){XML};
    \node (Excel)[GenericNodeStyle] at (0,2){Excel};
    \node (dbi)[GenericNodeStyle] at (0,-2){Databases};
    \node[below of = dbi](sql){ODBC,sqlite,Oracle};
    \node (R)[GenericNodeStyle] at (0,0){R};
    \node (text)[GenericNodeStyle] at (4,-2){Textfiles};
    \node[below of = text](skr){csv,txt,html};
    \draw[->](lykl)--(R);
    \draw[->](tolfr)--(R);
    \draw[<->](Excel)--(R);
    \draw[<->](dbi)--(R);
    \draw[<->](text)--(R);
    \draw[<->](xml)--(R);
  \end{tikzpicture}
\end{figure}


}

\begin{frame}[fragile]
\frametitle{Data entered directly into R}
One of the most useless forms of data enry is the "edit" command in R:
<<eval=FALSE>>=
dat <- data.frame(id=numeric(0), species=character(0),
                  length=numeric(0),age=numeric(0),
                  lat = numeric(0),lon=numeric(0))
dat <- edit(dat)
@
Note that this only creates variable in R that, unless saved, will disappear when R is closed.
\end{frame}

\begin{frame}[fragile,shrink=0.8]
\frametitle{Text files - read in}
\bi A lot of functions in R deal with reading in text files in various formats
\vs
\item Most of these functions are derivatives of \texttt{read.table}, such as \texttt{read.csv} and \texttt{read.delim}
\ei

<<eval=FALSE>>=
dat <-
  read.table(file = "nameOfFile", ## path to the file
             header = TRUE,       ## are column names
                                  ## at the top
             dec = '.',           ## decimal sign
             sep = ' ',           ## column separator symbol
             skip = 0,            ## num lines at top to skip
             stringsAsFactors = FALSE,
             comment.char = '#')  ## indicating comments
@


\end{frame}


\begin{frame}[fragile]
\frametitle{Text files - written out}
Analoguous to \texttt{read.table} we have \texttt{write.table}:
<<eval=FALSE>>=
write.table(dat,
            file = 'nameOfFile', ## file name
            col.names = TRUE,    ## write header
            row.names = FALSE,   ## write row names
            quote = FALSE,       ## characters qouted?
            sep = ',',
            dec = '.')
@

\end{frame}

\frame{
\frametitle{Location of files}
\begin{columns}
\begin{column}{0.5\linewidth}
\begin{figure}
\begin{tikzpicture}[sibling distance=10em,
  every node/.style = {shape=rectangle, rounded corners,
    draw, align=center,
    top color=white, bottom color=white}],xscale = 0.75,yscale = 0.75]
  \node {Root}
    child { node {curr.dir} }
    child { node {dir1}
      child { node {dir2}
        child { node {file1} }
        child { node {file2} }
        child { node {file3} }}
      child { node {wrong.dir}}};
\end{tikzpicture}

\end{figure}
\end{column}
\begin{column}{0.5\linewidth}
Assume you want read "file3" from "curr.dir":
\bi Go up one level to "Root": ".."
\item Go to dir1: "../dir1"
\item Go to dir2: "../dir1/dir2"
\item Locate file2: "../dir1/dir2/file2"
\ei
\vspace{3cm}

\end{column}
\end{columns}
}

\frame{
\frametitle{Forming the data -- rules of thumb}
\begin{enumerate}
\item Does each variable have its own column and each subject it own line?
\item Are there any unecessary lines?
\item Do the data contain any non-US characters?
\item Are there gaps in the data?
\item Are the results entered consistently?
\item Does every variable have its own name?
\item Are the numbers correctly entered?
\item Are there any item that can cause misunderstanding?
\end{enumerate}
}



\begin{frame}[fragile]
\frametitle{Excel files}
The \texttt{readxl} package provides support to read in Excel files directly into R
<<eval=FALSE>>=
library(readxl) ## needs to be installed
# read_excel reads both xls and xlsx files
read_excel("my-old-spreadsheet.xls")
read_excel("my-new-spreadsheet.xlsx")

# Specify sheet with a number or name
read_excel("my-spreadsheet.xls", sheet = "data")
read_excel("my-spreadsheet.xls", sheet = 2)

# If NAs are represented by something other than blank cells,
# set the na argument
read_excel("my-spreadsheet.xls", na = "NA")
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Connecting to an Access database}
\texttt{RODBC} provides functions to connect to an Access database
<<eval=FALSE>>=
# Load RODBC package
library(RODBC)

# Connect to Access db
channel <- odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")

# Get data
data <- sqlQuery( channel , "select *
 from Name_of_table_in_my_database")

# close connection
close(channel)

@


\end{frame}

\frame{
\frametitle{Hafro specific issues}

}



\begin{frame}[fragile]
\frametitle{Class excercise}
\bi Try the "edit" command, enter some random numbers and save the data to file, open it in Excel and save it as an excel file
\vs
\item Open notepad and enter the following data, save it and read into R using \texttt{read.table}:
\begin{verbatim}
a   b   c
1   1.5 cod
2   2.5 haddock
\end{verbatim}
\vs
\item Install \texttt{readxl} and try to read in the excel data file you created earlier
\vs
\item Open an example Access database and run queries from R
\ei
\end{frame}



\section{Data summaries}
\frame{
\frametitle{dplyr}
\bi dplyr is a set of tools for a common set of problems connected to
aggregates or summaries of data.
\vs
\item Similar to ggplot2 it features a Domain Specific Language (DSL)
  specially designed for data summaries.
\vs
\item Developed by Hadley Wickam, the creator ggplot2 and other
  useful tools.
\ei

}




\frame{
\frametitle{Summarising data for groups}
Commonly, when collating summaries by group, one wants to:
\bi \textbf{Split} up a big data structure into homogeneous pieces,
\vs
\item \textbf{Apply} a function to each piece
\vs
\item \textbf{Combine} all the results back together.
\ei

For example, one might want to

\bi fit the same model each patient subsets of a data frame
\vs
\item quickly calculate summary statistics for each group
\vs
\item perform group-wise transformations like scaling or standardising
\ei
}


<<echo=FALSE,message=FALSE,warning=FALSE>>=
minke <- read.csv('../data/minke.csv')
@

\begin{frame}[fragile,shrink=0.9]
\frametitle{Filter data}
One can create a subset of the data using the \texttt{filter} command:
<<>>=
## create a dataset with only females
minke.females <- filter(minke,sex=='Female')
head(minke.females)
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Logical operators}
A list of logical operators that are useful when filtering data:
<<eval=FALSE>>=
<       # less than
<=      # less than or equal to
>       # larger than
>=      # larger or equal to
==      # equal to
!=      # no equal to
x | y   # x or y
x & y   # x and y
@


\end{frame}


\begin{frame}[fragile]
\frametitle{Modifying columns}
If one wants to create a new variable (column) into the data sets one can either:

<<eval=FALSE>>=
minke$approx.weight <- 3.85*1e-06*minke$length^3.163
@

or use mutate

<<eval=FALSE>>=
minke <- mutate(minke,approx.weight = 3.85*1e-06*length^3.163)
@

This probably not very useful until you want to create many variables at once:

<<>>=
minke <- mutate(minke,
                approx.weight = 3.85*1e-06*length^3.163,
                weight = ifelse(is.na(weight),approx.weight,
                                weight))
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Creating summaries}
Similarly one can create summaries from the data using the summarise function:
<<>>=
summarise(minke,num.obs = length(whale.id))
@

And new summaries can be added:

<<>>=
summarise(minke,
          num.obs = length(whale.id),
          num.fem = sum(sex == 'Female'),
          num.large = sum(length > 650))
@


\end{frame}

\begin{frame}[fragile]
\frametitle{Split - apply - combine}
\bi Summarise and mutate are somewhat useful on its own but become much more useful when combined with a group\_by statement:
<<>>=
## split the analysis by area
minke <- group_by(minke,maturity)
summarise(minke,
          num.obs = length(whale.id),
          num.fem = sum(sex=='Female'),
          num.large = sum(length>650))

@

<<echo=FALSE>>=
minke <- ungroup(minke)
@

\ei
\end{frame}


\begin{frame}[fragile]
\frametitle{Chaining expressions together}
Operations can be chained using the $\%>\%$ operator
<<>>=
minke %>%
  group_by(maturity) %>%
  summarise(num.obs = length(whale.id),
            num.fem = sum(sex=='Female'),
            num.large = sum(length>650))
@

\end{frame}

\frame{
\frametitle{Excercise 3}
Create a new script, 'Ex3.R' and write code that produces:
\bi The number of whales caught each year
\vs
\item The proportion caught of which are females each year
\vs
\item Calculate the mean length and age along with standard deviation grouped by maturity
\ei
}


\section{Cleaning up data}
\frame{
\frametitle{Creating variables}
\begin{itemize}
\item[A] Coding variable as factors using \texttt{factor} and \texttt{levels}
\item[B] Split numeric values using \texttt{cut}
\item[C] Join two or more variables together in a factor
\item[D] Convert strings to dates using \texttt{as.Date}
\item[E] Create variables from bits of text
\item[F] Rename variables
\item[G] Create summaries
\end{itemize}

}


\frame{
\frametitle{Further reading}
\bi http://vita.had.co.nz/papers/tidy-data.pdf
\ei

}
\end{document}


