% SLIDES - brug denne linie
\documentclass[mathserif]{beamer} % options: gray

% HANDOUTS - brug denne linie
%\documentclass[handout,mathserif]{beamer} % options: gray

\usetheme{CambridgeUS} %sidebar
\usecolortheme{dolphin}

\usepackage{graphicx}
\usepackage{amssymb,amsmath}
\usepackage[T1]{fontenc}
%\usepackage[icelandic]{babel}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}
\usepackage{bm}
\usepackage{tipx}
\usepackage{marvosym}
%\usepackage{subfigure}
\usepackage{pgfpages}
\usepackage{multirow}

\usepackage{tikz,makecell}
\usetikzlibrary{arrows,decorations.pathmorphing,decorations.footprints,
fadings,calc,trees,mindmap,shadows,decorations.text,patterns,positioning,shapes,matrix,fit}
\input{../lec1/graphical_settings}
\tikzset{
  invisible/.style={opacity=0},
  visible on/.style={alt={#1{}{invisible}}},
  alt/.code args={<#1>#2#3}{%
    \alt<#1>{\pgfkeysalso{#2}}{\pgfkeysalso{#3}} % \pgfkeysalso doesn't change the path
  },
}
% hvis man vil har eg. 4 slides på en side
% \pgfpagesuselayout{4 on 1}[a4paper,border shrink = 5mm, landscape]

\definecolor{lgrey}{RGB}{245,245,245}
\setbeamercolor{block body}{fg=black,bg=lgrey}


\newcommand{\bs}{\boldsymbol}
\newcommand{\bi}{\begin{itemize}\item}
\newcommand{\ei}{\end{itemize}}
\newcommand{\eq}[1]{\begin{equation} #1 \end{equation}}
\newcommand{\ea}[1]{\begin{eqnarray} #1 \end{eqnarray}}
\newcommand{\vs}{\vspace{2mm}}

\definecolor{Red}{rgb}{0.9,0,0.1}

\title[R-Hafro]{Hafro goes R}
\subtitle{Data read in and the grammar of data}
\author[Bjarki\&Einar]{Bjarki Þór Elvarsson and Einar Hjörleifsson}
\date{} % beskidt .. men det virker
\institute[MRI]{Marine Research Institute}
\beamertemplatenavigationsymbolsempty % fjerner pdf-indhold, til hvis der bare skal printes slides ud
\AtBeginSection[]{
\begin{frame}<beamer>
   \frametitle{Overview}
   \tableofcontents[currentsection]
 \end{frame}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<echo=FALSE, warning=FALSE, message=FALSE>>=
library(ggplot2)
library(plyr)
library(dplyr)
@
\frame{
\titlepage
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\frame{
\frametitle{Overview}
\tableofcontents
}



\section{Reading data in R}
\frame{
\frametitle{Where can we find data}
\begin{figure}
  \begin{tikzpicture}[xscale = 1,yscale = 1]
    \node (lykl)[GenericNodeStyle] at (4,2){Keyboard};
    \node (tolfr)[GenericNodeStyle] at (-4,2){Other stats software};
    \node[below of = tolfr](tolff){SPSS,Matlab,SAS};
    \node (xml)[GenericNodeStyle] at (-4,-2){Webpages};
    \node (Excel)[GenericNodeStyle] at (0,2){Excel};
    \node (dbi)[GenericNodeStyle] at (0,-2){Databases};
    \node[below of = dbi](sql){ODBC,sqlite,Oracle};
    \node (R)[GenericNodeStyle] at (0,0){R};
    \node (text)[GenericNodeStyle] at (4,-2){Textfiles};
    \node[below of = text](skr){csv,txt,html};
    \draw[->](lykl)--(R);
    \draw[->](tolfr)--(R);
    \draw[<->](Excel)--(R);
    \draw[<->](dbi)--(R);
    \draw[<->](text)--(R);
    \draw[<->](xml)--(R);
  \end{tikzpicture}
\end{figure}


}

\frame{
\frametitle{Forming the data -- rules of thumb}
\begin{enumerate}
\item Does each variable have its own column and each subject it own line?
\vs
\item Are there any unecessary lines?
\vs
\item Do the data contain any non-US characters?
\vs
\item Are there gaps in the data?
\vs
\item Are the results entered consistently?
\vs
\item Does every variable have its own name?
\vs
\item Are the numbers correctly entered?
\vs
\item Are there any items that can cause misunderstanding?
\end{enumerate}
}

\begin{frame}[fragile]
\frametitle{Data entered directly into R}
One quickly enter data into R:
<<eval=FALSE>>=
weight <- c(1,5,3,2,6)
length <- c(10,17,14,12,18)
@

or if you want a more structured entry:

<<eval=FALSE>>=
dat <- data.frame(id=numeric(0), species=character(0),
                  length=numeric(0),age=numeric(0),
                  lat = numeric(0),lon=numeric(0))
dat <- edit(dat)
@
but this only creates variable in R that, unless saved, will disappear when R is closed.
\end{frame}


\begin{frame}[fragile,shrink=0.8]
\frametitle{Text files - read in}
\bi A lot of functions in R deal with reading in text files in various formats
\vs
\item Most of these functions are derivatives of \texttt{read.table}, such as \texttt{read.csv} and \texttt{read.delim}
\ei

<<eval=FALSE>>=
dat <-
  read.table(file = "nameOfFile", ## path to the file
             header = TRUE,       ## are column names
                                  ## at the top
             dec = '.',           ## decimal sign
             sep = ' ',           ## column separator symbol
             skip = 0,            ## num lines at top to skip
             stringsAsFactors = FALSE,
             comment.char = '#')  ## indicating comments
@


\end{frame}





\begin{frame}[fragile]
\frametitle{Other read functions}
<<eval=FALSE>>=
read.csv        ## US style CSV file
                ## col sep ',' and dec '.'
read.csv2       ## European style CSV file
                ## col sep ';' and dec ','
read.fwf        ## Fixed width input
                ## (used in the olden days)
read.fortran    ## fotran formated text
readLines       ## raw lines from the file
scan            ## reads in a vector from the input
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Data sanity check}
<<eval=FALSE>>=
head(dat)     ## shows the top 6 lines of dat
tail(dat)     ## shows the last 6 lines of dat
dim(dat)      ## shows the num row and col of dat
names(dat)    ## gives the column names of dat
summary(dat)  ## Quick summary statistics for the
              ## cols of dat
str(dat)      ## show the variable types of dat
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Text files - written out}
Analoguous to \texttt{read.table} we have \texttt{write.table}:
<<eval=FALSE>>=
write.table(dat,
            file = 'nameOfFile', ## file name
            col.names = TRUE,    ## write header
            row.names = FALSE,   ## write row names
            quote = FALSE,       ## characters qouted?
            sep = ',',
            dec = '.')
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Other write functions}
<<eval=FALSE>>=
write.csv       ## US style CSV file
                ## col sep ',' and dec '.'
write.csv2      ## European style CSV file
                ## col sep ';' and dec ','
write.fwf       ## Fixed width input
                ## from the gdata package
write           ## write raw lines to a file
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Location of files}
R is agnostic to file locations
\bi One can read a file in the working directory:
<<eval=FALSE>>=
minke <- read.csv2('minke.csv')
@
\item<2-> If minke whales are in folder called data within the working directory:
<<eval=FALSE>>=
minke <- read.csv2('data/minke.csv')
@
\item<3-> If it is somewhere on the computer one can use absolute positioning:
<<eval=FALSE>>=
minke <- read.csv2('~/data/minke.csv') ## linux/mac
minke <- read.csv2('c:/data/minke.csv') ## windows
@
\item<4-> If it is on-line:
<<eval=FALSE>>=
minke <-
  read.csv2('http://www.hafro.is/~bthe/data/minke.csv')
@

\ei

\end{frame}

\frame{
\frametitle{Location of files -- relative positioning}
\begin{columns}
\begin{column}{0.5\linewidth}
\begin{figure}
\begin{tikzpicture}[sibling distance=10em,
  every node/.style = {shape=rectangle, rounded corners,
    draw, align=center,
    top color=white, bottom color=white}],xscale = 0.75,yscale = 0.75]
  \node {Root}
    child { node {curr.dir} }
    child { node {dir1}
      child { node {dir2}
        child { node {file1} }
        child { node {file2} }
        child { node {file3} }}
      child { node {wrong.dir}}};
\end{tikzpicture}

\end{figure}
\end{column}
\begin{column}{0.5\linewidth}
Assume you want read "file3" from "curr.dir":
\bi Go up one level to "Root": ".."
\item Go to dir1: "../dir1"
\item Go to dir2: "../dir1/dir2"
\item Locate file3: "../dir1/dir2/file3"
\ei
\vspace{3cm}

\end{column}
\end{columns}
}



\begin{frame}[fragile]
\frametitle{Excel files}
The \texttt{readxl} package provides support to read in Excel files directly into R
<<eval=FALSE>>=
# read_excel reads both xls and xlsx files
read_excel("minke.xls")
read_excel("minke.xlsx")

# Specify sheet with a number or name
read_excel("minke.xls", sheet = "data")
read_excel("minke.xls", sheet = 2)

# If NAs are represented by something other than blank cells,
# set the na argument
read_excel("minke.xls", na = "NA")

## list excel sheets
excel_sheets('minke.xls')
@

\end{frame}

\begin{frame}[fragile]
\frametitle{Writing to Excel--files}
The \texttt{openxlsx} package can create Excel documents
<<eval=FALSE>>=
## write single sheet to file
write.xlsx(minke,file='minke.xlsx',sheetName='Minke whales')

## multiple sheets
write.xlsx(list('Minke whales'=minke,'fish'=fish),
           file='minkeandfish.xlsx')

@


\end{frame}



\frame{
\frametitle{Databases}
\bi Databases are commonly used to store (large amounts of) data and numerous software vendors provide database solutions, both general and specific
\vs
\item Similarly numerous packages exist to interact with databases in R. Notably \texttt{DBI}, \texttt{RODBC} and \texttt{ora}
\vs
\item Typically in an R session the user queries the database for the data needed for a particular analysis and loads it into memory. Larger datasets, that don't fit into memory will need to be subsampled
\ei

}


\begin{frame}[fragile]
\frametitle{Connecting to an Access database}
\texttt{RODBC} provides functions to connect to an Access database
<<eval=FALSE>>=
# Load RODBC package
library(RODBC)

# Connect to Access db
channel <-
  odbcConnectAccess("C:/Documents/Name_Of_My_Access_Database")

# Get data
data <- sqlQuery( channel , "select *
 from Name_of_table_in_my_database")

# close connection
close(channel)

@


\end{frame}






\begin{frame}[fragile]
\frametitle{Oracle databases}
\bi Oracle has built an extensive R package called \texttt{ROracle}.
\item Here at Hafro a simple interface package was built, called \texttt{ora}, for the most common use cases
\ei
<<eval=FALSE>>=
## query the database
hvalir <- sql('select * from hvalir.hvalir_v')

## describe the table (analogous to str in R)
desc('hvalir.hvalir_v')

## list all tables or view owned by 'hvalir'
tables('hvalir')
views('hvalir')
@


\end{frame}

\begin{frame}[fragile]
\frametitle{Hafro data packages}
In addition to \texttt{ora} two other packages provide access to Hafro data:
\vs
\bi \texttt{fjolst} allows the access to commonly database tables and contains a copy of these tables
\vs
\item \texttt{Logbooks} contains logbook data from the commercial fishery where available
\ei
\vs
<<eval=FALSE>>=
data('fjolst')
data('Logbooks')
@

\end{frame}


\begin{frame}[fragile]
\frametitle{Other software packages}
\bi Package \texttt{haven} provides support for SPSS, STATA and SAS files
<<eval=FALSE>>=
read_sas("path/to/file")  ## SAS files
read_por("path/to/file")  ## SPSS portable files
read_sav("path/to/file")  ## SPSS data files
read_dta("path/to/file")  ## Stata files
@
\item Similarly \texttt{R.matlab} can read Matlab files
<<eval=FALSE>>=
readMat('path/to/file') ## Matlab data files
@

\ei
\end{frame}

\frame{
\frametitle{Further reading}
\bi http://www.statmethods.net/input/importingdata.html
\vs
\item http://www.techonthenet.com/oracle/
\vs
\item
\ei
}

\begin{frame}[fragile]
\frametitle{Class excercise}
\bi Try the "edit" command, enter some random numbers and save the data to file, open it in Excel and save it as an excel file
\vs
\item Open notepad and enter the following data, save it and read into R using \texttt{read.table}:
\begin{verbatim}
a   b   c
1   1.5 cod
2   2.5 haddock
\end{verbatim}
\vs
\item Install \texttt{readxl} and try to read in the excel data file you created earlier
\vs
\item Load the \texttt{ora} package and query 'fiskar.kvarnir'
\ei
\end{frame}



\section{Grammar of data}
\frame{
\frametitle{dplyr and tidyr}
\bi dplyr and tidyr are a set of tools for a common set of problems connected to
aggregates or summaries of data.
\vs
\item Similar to ggplot2 they feature a Domain Specific Language (DSL)
  specially designed for data summaries.
\vs
\item Developed by Hadley Wickam, the creator ggplot2 and other
  useful tools.
\ei

}




\frame{
\frametitle{Summarising data for groups}
Commonly, when collating summaries by group, one wants to:
\bi \textbf{Split} up a big data structure into homogeneous pieces,
\vs
\item \textbf{Apply} a function to each piece
\vs
\item \textbf{Combine} all the results back together.
\ei

For example, one might want to

\bi fit the same model each patient subsets of a data frame
\vs
\item quickly calculate summary statistics for each group
\vs
\item perform group-wise transformations like scaling or standardising
\ei
}

\frame{
\frametitle{One table verbs}
\bi filter: keep rows matching criteria
\vs
\item select: pick columns by name
\vs
\item arrange: order the rows according to a variable
\vs
\item mutate: add new variables
\vs
\item summarise: reduce variables to values
\ei
}

\frame{
\frametitle{Structure}
\bi First argument is a data frame
\vs
\item Always return a data frame
\vs
\item Subsequent arguments say what to do with data frame
\vs
\item (Never modify in place)
\ei
}

%<<echo=FALSE,message=FALSE,warning=FALSE>>=
%minke <- read.csv('../data/minke.csv')
%@



\frame{
\frametitle{filter}
\includegraphics[width=0.8\linewidth]{figs/filter.png}
}


\frame{
\frametitle{select}
\includegraphics[width=0.7\linewidth]{figs/select.png}
}

\frame{
\frametitle{arrange}
\includegraphics[width=0.8\linewidth]{figs/arrange.png}
}

\frame{
\frametitle{mutate}
\includegraphics[width=0.8\linewidth]{figs/mutate.png}
}

\frame{
\frametitle{summarise}
\includegraphics[width=0.8\linewidth]{figs/summarise.png}
}

\begin{frame}[fragile]
\frametitle{Group verbs}
\bi group\_by: Group data into rows with the same value of (a) particular variable(s)
<<eval=FALSE>>=
minke <- group_by(minke,sex)
@
\item ungroup: Remove grouping information from data frame
<<eval=FALSE>>=
minke <- ungroup(minke)
@

\ei
\end{frame}

\frame{
\frametitle{Grouped summaries}
\includegraphics[width=0.8\linewidth]{figs/group_summarise.png}

}


\frame{
\frametitle{Reshape verbs}
\bi gather: Gather columns into rows
\vs
\item spread: Spread rows into columns
\vs
\item separate: Separate one column into many
\vs
\item unite: Unite several columns into one
\ei
}


\frame{
\frametitle{Gather}
\includegraphics[width=0.8\linewidth]{figs/gather.png}

}



\frame{
\frametitle{Spread}
\includegraphics[width=0.8\linewidth]{figs/spread.png}

}

\frame{
\frametitle{Separate}
\includegraphics[width=0.8\linewidth]{figs/separate.png}

}

\frame{
\frametitle{Unite}
\includegraphics[width=0.8\linewidth]{figs/unite.png}

}
%' \begin{frame}[fragile,shrink=0.9]
%' \frametitle{Filter data}
%' One can create a subset of the data using the \texttt{filter} command:
%' <<eval=FALSE>>=
%' ## create a dataset with only females
%' minke.females <-
%'   filter(minke,sex=='Female')
%' @
%'
%' \end{frame}


%' \begin{frame}[fragile]
%' \frametitle{Modifying columns}
%' If one wants to create a new variable (column) into the data sets one can either:
%'
%' <<eval=FALSE>>=
%' minke$approx.weight <- 3.85*1e-06*minke$length^3.163
%' @
%'
%' or use mutate
%'
%' <<eval=FALSE>>=
%' minke <- mutate(minke,approx.weight = 3.85*1e-06*length^3.163)
%' @
%'
%' This probably not very useful until you want to create many variables at once:
%'
%' <<>>=
%' minke <- mutate(minke,
%'                 approx.weight = 3.85*1e-06*length^3.163,
%'                 weight = ifelse(is.na(weight),approx.weight,
%'                                 weight))
%' @
%'
%' \end{frame}
%'
%'
%' \begin{frame}[fragile]
%' \frametitle{Creating summaries}
%' Similarly one can create summaries from the data using the summarise function:
%' <<>>=
%' summarise(minke,num.obs = length(whale.id))
%' @
%'
%' And new summaries can be added:
%'
%' <<>>=
%' summarise(minke,
%'           num.obs = length(whale.id),
%'           num.fem = sum(sex == 'Female'),
%'           num.large = sum(length > 650))
%' @
%'
%'
%' \end{frame}
%'
%' \begin{frame}[fragile]
%' \frametitle{Split - apply - combine}
%' \bi Summarise and mutate are somewhat useful on its own but become much more useful when combined with a group\_by statement:
%' <<>>=
%' ## split the analysis by area
%' minke <- group_by(minke,maturity)
%' summarise(minke,
%'           num.obs = length(whale.id),
%'           num.fem = sum(sex=='Female'),
%'           num.large = sum(length>650))
%'
%' @
%'
%' <<echo=FALSE>>=
%' minke <- ungroup(minke)
%' @
%'
%' \ei
%' \end{frame}

\begin{frame}[fragile]
\frametitle{Chaining expressions together}
\bi In R one can apply functions to data:
<<eval=FALSE>>=
avg.l <- mean(minke$length)
l2 <- avg.l^2
@
\item One also chain this together:
<<eval=FALSE>>=
l2 <- mean(minke$length)^2
@

\ei

\end{frame}


\begin{frame}[fragile]
\frametitle{Chaining expressions together}
All this quickly becomes cumbersome and hard to read:
<<eval=FALSE>>=
summarise(
  group_by(
    filter(minke,!is.na(weight)),
    sex),
  num.whale=n(),
  m.weight = mean(weight)
)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{The $\%>\%$ operator}
Operations can however chained using the $\%>\%$ operator from dplyr
<<eval=FALSE>>=
minke %>%
  filter(!is.na(weight)) %>%
  group_by(sex) %>%
  summarise(num.whale = n(),
            m.weight = mean(weight))

## hint think of %>% as 'then'
@
The  $\%>\%$ operator pushes the output from the first command as the first input to the next command
\end{frame}



\begin{frame}[shrink=0.8]
\frametitle{Further reading}
\bi https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf
\vs
\item https://cran.rstudio.com/web/packages/dplyr/\-vignettes/introduction.html
\vs
\item http://vita.had.co.nz/papers/tidy-data.pdf
\vs
\item http://www.jvcasillas.com/tidyr\_tutorial/
\vs
\item http://stackoverflow.com/questions/3505701/r-grouping-functions-sapply-vs-lapply-vs-apply-vs-tapply-vs-by-vs-aggrega
\ei

\end{frame}



\frame{
\frametitle{Excercise 3}
Create a new script, 'Ex3.R' and write code that produces:
\bi The number of whales caught each year
\vs
\item The proportion caught of which are females each year
\vs
\item Calculate the mean length and age along with standard deviation grouped by maturity
\vs
\item Using $\%>\%$ and spread, calculate number of whales caught by area (rows) and year (columns)
\ei
}


% \section{Cleaning up data}
% \frame{
% \frametitle{Creating variables}
% \begin{itemize}
% \item[A] Coding variable as factors using \texttt{factor} and \texttt{levels}
% \item[B] Split numeric values using \texttt{cut}
% \item[C] Join two or more variables together in a factor
% \item[D] Convert strings to dates using \texttt{as.Date}
% \item[E] Create variables from bits of text
% \item[F] Rename variables
% \item[G] Create summaries
% \end{itemize}
%
% }




\end{document}


